{% extends 'base.html.twig' %}
{% block title %}Оформление заказа{% endblock %}
{% block description %}Оформление заказа на сайте Lipinskie Raki{% endblock %}
{% block stylesheets %}
    {{ parent() }}
    {{ encore_entry_link_tags('order') }}
    {#{{ encore_entry_link_tags('footer') }}#}
{% endblock %}
{% block body %}
        <div class="container">
            {% set sum = app.session.get('totalSum') %}
            {% set order = app.session.get('chooseOrder') %}
            {% include 'elements/small_header.html.twig' %}
            <main>
            <div class="red-content make-order-height">
                <embed id="van" type="image/svg+xml" src="/assets/img/van.svg"/>
                <div class="order-block">
                    <div id="order-title">
                        Оформление заказа
                    </div>
                    {{ form_start(form,{'attr': {'class': 'order-form'}}) }}
                    <div>
                        {{ form_widget(form.name,{'attr': {'class': 'order-input',
                            'placeholder':'Имя*'}}) }}
                    </div>
                    <div>
                        {{ form_widget(form.surname,{'attr': {'class': 'order-input',
                            'placeholder':'Фамилия*'}}) }}
                    </div>
                    <div>
                        {{ form_widget(form.phoneNumber,{'attr': {'class': 'order-input input-margin-29 phone-mask',
                            'placeholder':'+38(___)___-__-__*'}}) }}
                    </div>
                    <div>
                        {{ form_widget(form.email,{'attr': {'class': 'order-input',
                            'placeholder':'Email*'}}) }}
                    </div>
                        <div class="form-row input-margin-16">
                            <div>
                            {{ form_widget(form.orderDate,{'attr': {'class':  order ? 'date-input-without':'date-input',
                                'placeholder':'Дата*'}}) }}
                            </div>
                            <div>
                            {{ form_widget(form.orderTime,{'attr': {'class': 'time-input',
                                'placeholder':'00:00*'}}) }}
                            </div>
                        </div>
                        <div class="delivery-type">
                            <div id="del" class="delivery-active delivery">
                                Доставка
                            </div>
                            <div id="self-del" class="self-delivery">
                                Самовывоз
                            </div>
                        </div>
                        <div class="lipinka-street">
                            вулиця Волоська 28, Київ
                        </div>
                        <div>
                            {{ form_widget(form.deliveryType,{'id':'adress-order','attr': {'class': 'order-input input-margin-16 order-address'}}) }}
                        </div>
                        <div>
                            {{ form_widget(form.comment,{'attr':{ 'class': 'order-input text-area','rows': 4,'placeholder':'Комментарий'}}) }}
                        </div>
                        {{ form_widget(form.coordinates) }}
                        <div id="map-block-inform"></div>
                        <button type="submit" class="checkout-order mb-4">Оформить</button>
                    {{ form_end(form) }}
{#                    <form action="" class="order-form">#}
{#                        <input type="text" class="order-input" placeholder="Имя*">#}
{#                        <input type="text" class="order-input" placeholder="Фамилия*">#}
{#                        <input type="text" class="order-input input-margin-29" placeholder="+38(000)___-__-__*">#}
{#                        <input type="text" class="order-input" placeholder="Email*">#}
{#                        <div class="form-row input-margin-16">#}
{#                            <input type="text" class="date-input" placeholder="Дата*">#}
{#                            <input type="text" class="time-input" placeholder="14:00*">#}
{#                        </div>#}
{#                        <div class="delivery-type">#}
{#                            <div id="del" class="delivery-active delivery">#}
{#                                Доставка#}
{#                            </div>#}
{#                            <div id="self-del" class="self-delivery">#}
{#                                Самовывоз#}
{#                            </div>#}
{#                        </div>#}
{#                        <input type="text" id="adress-order" class="order-input input-margin-16 order-address" placeholder="Address Bla Bla*">#}
{#                        <div class="lipinka-street">#}
{#                            проспект раков Липинка#}
{#                        </div>#}
{#                        <div class="checkout-order">#}
{#                            Оформить#}
{#                        </div>#}
{#                    </form>#}
                </div>
                <div id="map-block">

                </div>
            </div>
            </main>
        </div>
        {% include 'elements/__footer.html.twig' with { 'active': false } %}
        {% include 'elements/mobile-nav.html.twig' with {'mob_active': false} %}
{% endblock %}
{% block javascripts %}
    {{ parent() }}
    {{ encore_entry_script_tags('order') }}
    <script>
        function recognizeMap() {
            return window.getComputedStyle(document.getElementById('map-block')).display === 'block'
                ? document.getElementById('map-block')
                : document.getElementById('map-block-inform');
        }

        function initAutocomplete() {
            var map = new google.maps.Map(recognizeMap(), {
                center: {lat: 50.450469, lng: 30.515649},
                zoom: 13,
                mapTypeId: 'roadmap'
            });

            let geocoder = new google.maps.Geocoder;
            let marker;
            let listener = map.addListener('click', function(e) {
                placeMarker(e.latLng, map);
            });

            document.getElementById('del').onclick = function () {
                if (typeof marker == "object") {
                    marker.setMap(null);
                    marker = null;
                }
                document.getElementById('adress-order').value = '';
                map.addListener('click', function(e) {
                    placeMarker(e.latLng, map);
                });
            };

            document.getElementById('self-del').onclick = function (e) {
                placeMarker({lat: 50.468757454938945, lng: 30.517364906297004}, map);
                google.maps.event.clearListeners(map,'click');
            };

            function placeMarker(position, map) {
                if (marker == null) {
                    marker = new google.maps.Marker({
                        position: position,
                        map: map
                    });
                    geocodePosition(marker);
                    map.panTo(position);
                } else {
                    geocodePosition(marker);
                    marker.setPosition(position);
                    map.panTo(position);
                }
            }

            function geocodePosition(marker) {
                let latLng = {
                    lat: marker.getPosition().lat(),
                    lng: marker.getPosition().lng()
                };
                geocoder.geocode({
                    'location' : latLng,
                },function (results, status) {
                    if (status === 'OK'){
                        if (results[0]){
                            document.getElementById('adress-order').value = results[0].formatted_address ;
                        } else {
                            document.getElementById('adress-order').value = '';
                        }
                    }
                });
                document.getElementById('order_coordinates').value = latLng.lat+' '+latLng.lng;
            }

            // Create the search box and link it to the UI element.
            var input = document.getElementById('adress-order');
            var searchBox = new google.maps.places.Autocomplete(input);
            searchBox.setComponentRestrictions({'country': ['ua']});
            // map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

            // Bias the SearchBox results towards current map's viewport.
            map.addListener('bounds_changed', function() {
                searchBox.setBounds(map.getBounds());
            });

            // Listen for the event fired when the user selects a prediction and retrieve
            // more details for that place.
            searchBox.addListener('place_changed', function() {
                var place = searchBox.getPlace();
                if (place.length == 0) {
                    return;
                }
                /*marker.setMap(null);*/
                var bounds = new google.maps.LatLngBounds();
                    if (!place.geometry) {
                        console.log("Returned place contains no geometry");
                        return;
                    }
                    if(marker)
                        marker.setMap(null);
                    marker = new google.maps.Marker({
                        map: map,
                        title: place.name,
                        position: place.geometry.location
                    });
                     document.getElementById('order_coordinates').value = place.geometry.location.lat()+' '+place.geometry.location.lng();

                    if (place.geometry.viewport) {
                        // Only geocodes have viewport.
                        bounds.union(place.geometry.viewport);
                    } else {
                        bounds.extend(place.geometry.location);
                    }
                map.fitBounds(bounds);
            });
        }
    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key={{ google_map_key }}&libraries=places&callback=initAutocomplete"
            async defer></script>
{% endblock %}
